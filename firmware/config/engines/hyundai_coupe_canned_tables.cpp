#if HW_HELLEN_HYUNDAI
static void cannedprimeBins() {
	static const float hardCodedprimeBins[8] = {-40.0, -20.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0};
	copyArray(engineConfiguration->primeBins, hardCodedprimeBins);
}

static void cannedprimeValues() {
	static const float hardCodedprimeValues[8] = {755.0, 605.0, 265.0, 140.0, 75.0, 50.0, 45.0, 40.0};
	copyArray(engineConfiguration->primeValues, hardCodedprimeValues);
}

static void cannedcltIdleCorrBins() {
#if CLT_IDLE_TABLE_CLT_SIZE == 16
	static const float hardCodedcltIdleCorrBins[16] = {-40.0, -30.0, -20.0, -10.0, 0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0, 110.0};
	copyArray(config->cltIdleCorrBins, hardCodedcltIdleCorrBins);
#endif // CLT_IDLE_TABLE_CLT_SIZE
}

static void cannedcltIdleCorr() {
#if CLT_IDLE_TABLE_CLT_SIZE == 16
	static const float hardCodedcltIdleCorr[16] = {1.5, 1.5, 1.333333, 1.333333, 1.333333, 1.333333, 1.333333, 1.333333, 1.333333, 1.233333, 1.166667, 1.1, 1.0, 1.0, 1.0, 1.0};
	copyArray(config->cltIdleCorr, hardCodedcltIdleCorr);
#endif // CLT_IDLE_TABLE_CLT_SIZE
}

static void couplecannedveTable() {
#if (VE_LOAD_COUNT == 16) && (VE_RPM_COUNT == 16)
	static const float hardCodedveTable[16][16] = {
{52.000,	54.000,	54.000,	56.000,	61.000,	55.000,	55.000,	65.000,	65.000,	60.000,	60.000,	60.000,	60.000,	60.000,	60.000,	60.000,	},
{51.500,	54.500,	54.400,	56.000,	61.000,	68.100,	66.800,	67.600,	68.200,	63.400,	63.400,	63.400,	63.400,	63.400,	63.400,	63.400,	},
{52.500,	55.400,	57.700,	62.200,	62.800,	65.800,	69.600,	71.100,	72.200,	67.600,	67.600,	67.600,	67.600,	67.600,	67.600,	67.600,	},
{54.200,	56.300,	59.000,	64.300,	65.700,	68.400,	71.400,	72.900,	73.900,	70.500,	70.400,	70.400,	70.300,	70.200,	70.200,	70.200,	},
{54.400,	56.700,	59.500,	65.200,	71.800,	75.400,	75.300,	73.800,	74.700,	72.600,	72.500,	72.300,	72.200,	72.100,	72.000,	72.000,	},
{55.100,	58.100,	61.400,	67.900,	75.400,	77.300,	75.000,	76.300,	77.200,	77.500,	77.000,	76.500,	76.000,	75.600,	75.400,	75.400,	},
{55.800,	59.400,	63.000,	70.100,	73.200,	75.400,	77.800,	78.900,	79.800,	79.100,	78.400,	77.700,	77.000,	76.400,	76.100,	76.100,	},
{56.000,	66.200,	70.600,	74.200,	74.100,	76.000,	79.900,	84.100,	82.200,	79.600,	78.900,	78.200,	77.500,	76.900,	76.600,	76.600,	},
{58.500,	67.400,	69.200,	75.500,	78.300,	79.900,	81.700,	83.700,	84.700,	82.100,	81.400,	80.700,	80.000,	79.400,	79.100,	79.100,	},
{52.900,	70.000,	71.900,	75.900,	79.800,	81.900,	83.700,	85.600,	86.100,	83.600,	83.000,	82.200,	81.600,	81.000,	80.700,	83.700,	},
{50.700,	71.000,	73.000,	77.300,	81.600,	83.900,	85.700,	87.600,	87.900,	85.400,	84.800,	84.000,	83.400,	82.800,	82.500,	85.500,	},
{53.700,	74.000,	76.000,	80.300,	84.600,	86.900,	88.700,	90.600,	90.900,	88.400,	87.800,	87.000,	86.400,	85.800,	85.500,	88.500,	},
{56.700,	77.000,	79.000,	83.300,	87.600,	89.900,	91.700,	93.600,	93.900,	91.400,	90.800,	90.000,	89.400,	88.800,	88.500,	91.500,	},
{59.700,	80.000,	82.000,	86.300,	90.600,	92.900,	94.700,	96.600,	96.900,	94.400,	93.800,	93.000,	92.400,	91.800,	91.500,	94.500,	},
{62.700,	83.000,	85.000,	89.300,	93.600,	95.900,	97.700,	99.600,	99.900,	97.400,	96.800,	96.000,	95.400,	94.800,	94.500,	97.500,	},
{65.700,	86.000,	88.000,	92.300,	96.600,	98.900,	100.700,	102.600,	102.900,	100.400,	99.800,	99.000,	98.400,	97.800,	97.500,	100.500,	},
};
	copyTable(config->veTable, hardCodedveTable);
#endif
}

static void couplecannedignitionTable() {
#if (IGN_LOAD_COUNT == 16) && (IGN_RPM_COUNT == 16)
	static const float hardCodedignitionTable[16][16] = {
{12.100,	14.000,	17.800,	22.900,	29.300,	35.600,	-20.000,	-20.000,	-20.000,	-20.000,	-20.000,	-20.000,	42.000,	42.000,	42.000,	42.000,	},
{11.800,	13.700,	10.000,	14.900,	28.600,	34.800,	-20.000,	-20.000,	-20.000,	-20.000,	-20.000,	-20.000,	41.000,	41.000,	41.000,	41.000,	},
{11.600,	13.400,	12.300,	17.100,	28.000,	33.900,	39.200,	40.000,	40.000,	40.000,	40.000,	40.000,	40.000,	40.000,	40.000,	40.000,	},
{11.400,	13.200,	16.700,	21.400,	27.300,	33.100,	38.200,	39.000,	39.000,	39.000,	39.000,	39.000,	39.000,	39.000,	39.000,	39.000,	},
{11.200,	12.900,	16.300,	20.800,	26.600,	32.300,	37.200,	38.000,	38.000,	38.000,	38.000,	38.000,	38.000,	38.000,	38.000,	38.000,	},
{10.900,	12.600,	16.600,	20.200,	26.400,	26.700,	27.000,	28.500,	30.000,	30.400,	30.800,	31.100,	31.500,	31.900,	32.300,	33.000,	},
{10.800,	12.400,	16.800,	19.600,	23.900,	24.200,	24.500,	26.000,	27.500,	27.900,	28.300,	28.600,	29.000,	29.400,	29.800,	30.500,	},
{14.300,	14.900,	16.500,	18.800,	20.700,	21.700,	22.000,	23.500,	25.000,	25.400,	25.800,	26.100,	26.500,	26.900,	27.300,	28.000,	},
{14.000,	14.600,	15.600,	17.100,	18.500,	19.200,	19.500,	21.000,	22.500,	22.900,	23.300,	23.600,	24.000,	24.400,	24.800,	25.500,	},
{12.900,	13.300,	14.000,	15.100,	16.100,	16.700,	17.000,	18.500,	20.000,	20.400,	20.800,	21.100,	21.500,	21.900,	22.300,	23.000,	},
{11.700,	12.000,	12.400,	13.100,	13.700,	14.200,	14.500,	16.000,	17.500,	17.900,	18.300,	18.600,	19.000,	19.400,	19.800,	20.500,	},
{10.400,	10.500,	10.800,	11.100,	11.500,	11.900,	12.000,	13.500,	15.000,	15.400,	15.800,	16.100,	16.500,	16.900,	17.300,	18.000,	},
{8.800,	9.000,	9.100,	9.400,	9.700,	10.000,	10.300,	11.800,	13.300,	13.700,	14.100,	14.400,	14.800,	15.200,	15.600,	16.300,	},
{6.700,	6.800,	7.500,	7.700,	8.000,	8.400,	8.700,	10.200,	11.700,	12.100,	12.500,	12.800,	13.200,	13.600,	14.000,	14.700,	},
{1.800,	5.600,	6.200,	6.500,	6.800,	7.100,	7.000,	8.500,	10.000,	10.400,	10.800,	11.100,	11.500,	11.900,	12.300,	13.000,	},
{-1.200,	2.600,	3.200,	3.600,	4.100,	5.000,	7.100,	7.800,	8.400,	9.000,	9.400,	9.500,	9.700,	9.800,	10.000,	10.000,	},
};
	copyTable(config->ignitionTable, hardCodedignitionTable);
#endif
}

#endif // HW_HELLEN_HYUNDAI
