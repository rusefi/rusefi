// generated by class com.rusefi.output.SdCardFieldsContent
#include "board_lookup.h"
static const MLG::Entries::Field fields[] = {
	{packedTime, GAUGE_NAME_TIME, "sec", 0},
	{engine->outputChannels, 0, 0, "SD: Present", ""},
	{engine->outputChannels, 0, 1, "SD: Logging", ""},
	{engine->outputChannels, 0, 2, "triggerScopeReady", ""},
	{engine->outputChannels, 0, 3, "antilagTriggered", ""},
	{engine->outputChannels, 0, 4, "isO2HeaterOn", ""},
	{engine->outputChannels, 0, 5, "checkEngine", ""},
	{engine->outputChannels, 0, 6, "needBurn", ""},
	{engine->outputChannels, 0, 7, "SD: MSD", ""},
	{engine->outputChannels, 0, 8, "Tooth Logger Ready", ""},
	{engine->outputChannels, 0, 9, "Error: TPS", ""},
	{engine->outputChannels, 0, 10, "Error: CLT", ""},
	{engine->outputChannels, 0, 11, "Error: MAP", ""},
	{engine->outputChannels, 0, 12, "Error: IAT", ""},
	{engine->outputChannels, 0, 13, "Error: Trigger", ""},
	{engine->outputChannels, 0, 14, "Error: Active", ""},
	{engine->outputChannels, 0, 15, "Warning: Active", ""},
	{engine->outputChannels, 0, 16, "Error: Pedal", ""},
	{engine->outputChannels, 0, 17, "Launch Control Triggered", ""},
	{engine->outputChannels, 0, 18, "Error: TPS2", ""},
	{engine->outputChannels, 0, 19, "Injector Fault", ""},
	{engine->outputChannels, 0, 20, "Ignition Fault", ""},
	{engine->outputChannels, 0, 21, "isUsbConnected", ""},
	{engine->outputChannels, 0, 22, "dfcoActive", ""},
	{engine->outputChannels, 0, 23, "SD card writing", ""},
	{engine->outputChannels, 0, 24, "SD card reading", ""},
	{engine->outputChannels, 0, 25, "MAP from sensor seems valid", ""},
	{engine->outputChannels, 0, 26, "triggerPageRefreshFlag", ""},
	{engine->outputChannels, 0, 27, "hasFaultReportFile", ""},
	{engine->outputChannels, 0, 28, "Analog sensors supply failure", ""},
	{engine->outputChannels, 0, 29, "isTuningNow", ""},
	{engine->outputChannels, 0, 30, "SD: formating is in progress", ""},
	{engine->outputChannels, 0, 31, "isMapAveraging", ""},
	{engine->outputChannels.RPMValue, "RPM", "RPM", 0},
	{engine->outputChannels.rpmAcceleration, "dRPM", "RPM acceleration/Rate of Change/ROC", 2},
	{engine->outputChannels.speedToRpmRatio, "Gearbox Ratio", "value", 2},
	{engine->outputChannels.internalMcuTemperature, "ECU: CPU Temperature", "deg C", 0},
	{engine->outputChannels.coolant, "CLT", "deg C", 1},
	{engine->outputChannels.intake, "IAT", "deg C", 1},
	{engine->outputChannels.auxTemp1, "auxTemp1", "deg C", 1},
	{engine->outputChannels.auxTemp2, "auxTemp2", "deg C", 1},
	{engine->outputChannels.TPSValue, "TPS", "%", 2},
	{engine->outputChannels.throttlePedalPosition, "Throttle pedal position", "%", 2},
	{engine->outputChannels.tpsADC, "tpsADC", "ADC", 0},
	{engine->outputChannels.rawMaf, "rawMaf", "V", 3},
	{engine->outputChannels.mafMeasured, "MAF", "kg/h", 1},
	{engine->outputChannels.MAPValue, "MAP", "kPa", 1},
	{engine->outputChannels.baroPressure, "baroPressure", "kPa", 1},
	{engine->outputChannels.lambdaValue, "Lambda", "", 3},
	{engine->outputChannels.VBatt, "VBatt", "V", 2},
	{engine->outputChannels.oilPressure, "Oil Pressure", "kPa", 0},
	{engine->outputChannels.vvtPositionB1I, "VVT: bank 1 intake", "deg", 1},
	{engine->outputChannels.actualLastInjection, "Fuel: Last inj pulse width", "ms", 3},
	{engine->outputChannels.stopEngineCode, "stopEngineCode", "", 0},
	{engine->outputChannels.injectorDutyCycle, "Fuel: injector duty cycle", "%", 0},
	{engine->outputChannels.tempLogging1, "tempLogging1", "", 0},
	{engine->outputChannels.injectionOffset, "Fuel: Injection timing SOI", "deg", 0},
	{engine->outputChannels.engineMakeCodeNameCrc16, "Engine CRC16", "crc16", 0},
	{engine->outputChannels.wallFuelAmount, "Fuel: wall amount", "mg", 3},
	{engine->outputChannels.wallFuelCorrectionValue, "Fuel: wall correction", "mg", 3},
	{engine->outputChannels.revolutionCounterSinceStart, "revolutionCounterSinceStart", "", 0},
	{engine->outputChannels.canReadCounter, "CAN: Rx", "", 0},
	{engine->outputChannels.tpsAccelFuel, "Fuel: TPS acceleration add fuel ms", "ms", 3},
	{engine->outputChannels.currentIgnitionMode, "Ignition: Mode", "", 0},
	{engine->outputChannels.currentInjectionMode, "Fuel: Injection mode", "", 0},
	{engine->outputChannels.coilDutyCycle, "Ignition: coil duty cycle", "%", 0},
	{engine->outputChannels.etb1DutyCycle, "ETB: Duty", "%", 1},
	{engine->outputChannels.fuelTankLevel, "Fuel level", "%", 0},
	{engine->outputChannels.totalFuelConsumption, "Fuel: Total consumed", "grams", 1},
	{engine->outputChannels.fuelFlowRate, "Fuel: Flow rate", "gram/s", 3},
	{engine->outputChannels.TPS2Value, "TPS2", "%", 2},
	{engine->outputChannels.tuneCrc16, "Tune CRC16", "crc16", 0},
	{engine->outputChannels.veValue, "Fuel: VE", "ratio", 1},
	{engine->outputChannels.seconds, "Uptime", "sec", 0},
	{engine->outputChannels.engineMode, "Engine Mode", "em", 0},
	{engine->outputChannels.firmwareVersion, "firmware", "version_f", 0},
	{engine->outputChannels.rawIdlePositionSensor, "rawIdlePositionSensor", "V", 3},
	{engine->outputChannels.rawWastegatePosition, "rawWastegatePosition", "V", 3},
	{engine->outputChannels.accelerationLat, "Accel: Lateral", "G", 0},
	{engine->outputChannels.accelerationLon, "Accel: Longitudinal", "G", 0},
	{engine->outputChannels.detectedGear, "Detected Gear", "", 0},
	{engine->outputChannels.maxTriggerReentrant, "maxTriggerReentrant", "", 0},
	{engine->outputChannels.rawLowFuelPressure, "rawLowFuelPressure", "V", 3},
	{engine->outputChannels.rawHighFuelPressure, "rawHighFuelPressure", "V", 3},
	{engine->outputChannels.lowFuelPressure, "Fuel pressure (low)", "kpa", 0},
	{engine->outputChannels.tcuDesiredGear, "TCU: Desired Gear", "gear", 0},
	{engine->outputChannels.flexPercent, "Flex Ethanol %", "%", 1},
	{engine->outputChannels.wastegatePositionSensor, "Wastegate position sensor", "%", 2},
	{engine->outputChannels.highFuelPressure, "Fuel pressure (high)", "bar", 0},
	{engine->outputChannels.tempLogging3, "tempLogging3", "", 0},
	{engine->outputChannels.tempLogging4, "tempLogging4", "", 0},
	{engine->outputChannels.calibrationValue, "calibrationValue", "", 0},
	{engine->outputChannels.calibrationMode, "calibrationMode", "", 0},
	{engine->outputChannels.idleStepperTargetPosition, "Idle: Stepper target position", "", 0},
	{engine->outputChannels.totalTriggerErrorCounter, "Trigger Error Counter", "counter", 0},
	{engine->outputChannels.orderingErrorCounter, "orderingErrorCounter", "", 0},
	{engine->outputChannels.warningCounter, "Warning: counter", "count", 0},
	{engine->outputChannels.lastErrorCode, "Warning: last", "error", 0},
	{engine->outputChannels.recentErrorCode[0], "Warning code 1", "error", 0},
	{engine->outputChannels.recentErrorCode[1], "Warning code 2", "error", 0},
	{engine->outputChannels.recentErrorCode[2], "Warning code 3", "error", 0},
	{engine->outputChannels.recentErrorCode[3], "Warning code 4", "error", 0},
	{engine->outputChannels.recentErrorCode[4], "Warning code 5", "error", 0},
	{engine->outputChannels.recentErrorCode[5], "Warning code 6", "error", 0},
	{engine->outputChannels.recentErrorCode[6], "Warning code 7", "error", 0},
	{engine->outputChannels.recentErrorCode[7], "Warning code 8", "error", 0},
	{engine->outputChannels.debugFloatField1, "debugFloatField1", "val", 3},
	{engine->outputChannels.debugFloatField2, "debugFloatField2", "val", 3},
	{engine->outputChannels.debugFloatField3, "debugFloatField3", "val", 3},
	{engine->outputChannels.debugFloatField4, "debugFloatField4", "val", 3},
	{engine->outputChannels.debugFloatField5, "debugFloatField5", "val", 3},
	{engine->outputChannels.debugFloatField6, "debugFloatField6", "val", 3},
	{engine->outputChannels.debugFloatField7, "debugFloatField7", "val", 3},
	{engine->outputChannels.debugIntField1, "debugIntField1", "val", 0},
	{engine->outputChannels.debugIntField2, "debugIntField2", "val", 0},
	{engine->outputChannels.debugIntField3, "debugIntField3", "val", 0},
	{engine->outputChannels.debugIntField4, "debugIntField4", "val", 0},
	{engine->outputChannels.debugIntField5, "debugIntField5", "val", 0},
	{engine->outputChannels.egt[0], "EGT 1", "deg C", 2},
	{engine->outputChannels.egt[1], "EGT 2", "deg C", 2},
	{engine->outputChannels.egt[2], "EGT 3", "deg C", 2},
	{engine->outputChannels.egt[3], "EGT 4", "deg C", 2},
	{engine->outputChannels.egt[4], "EGT 5", "deg C", 2},
	{engine->outputChannels.egt[5], "EGT 6", "deg C", 2},
	{engine->outputChannels.egt[6], "EGT 7", "deg C", 2},
	{engine->outputChannels.egt[7], "EGT 8", "deg C", 2},
	{engine->outputChannels.rawTps1Primary, "rawTps1Primary", "V", 3},
	{engine->outputChannels.rawClt, "rawClt", "V", 3},
	{engine->outputChannels.rawIat, "rawIat", "V", 3},
	{engine->outputChannels.rawOilPressure, "rawOilPressure", "V", 3},
	{engine->outputChannels.rawAcPressure, "rawAcPressure", "V", 3},
	{engine->outputChannels.rawFuelLevel, "rawFuelLevel", "V", 3},
	{engine->outputChannels.fuelClosedLoopBinIdx, "fuelClosedLoopBinIdx", "Bin", 0},
	{engine->outputChannels.fuelClosedLoopLearningBinIdx, "fuelClosedLoopLearningBinIdx", "Bin", 0},
	{engine->outputChannels.rawPpsPrimary, "rawPpsPrimary", "V", 3},
	{engine->outputChannels.rawPpsSecondary, "rawPpsSecondary", "V", 3},
	{engine->outputChannels.rawRawPpsPrimary, "rawRawPpsPrimary", "V", 3},
	{engine->outputChannels.rawRawPpsSecondary, "rawRawPpsSecondary", "V", 3},
	{engine->outputChannels.idlePositionSensor, "Idle: Position sensor", "%", 2},
	{engine->outputChannels.AFRValue, "Air/Fuel Ratio", "AFR", 2},
	{engine->outputChannels.AFRValue2, "Air/Fuel Ratio 2", "AFR", 2},
	{engine->outputChannels.SmoothedAFRValue, "Smoothed Air/Fuel Ratio", "AFR", 2},
	{engine->outputChannels.SmoothedAFRValue2, "Smoothed Air/Fuel Ratio 2", "AFR", 2},
	{engine->outputChannels.VssAcceleration, "Vss Accel", "m/s2", 2},
	{engine->outputChannels.lambdaValue2, "Lambda 2", "", 3},
	{engine->outputChannels.vvtPositionB1E, "VVT: bank 1 exhaust", "deg", 1},
	{engine->outputChannels.vvtPositionB2I, "VVT: bank 2 intake", "deg", 1},
	{engine->outputChannels.vvtPositionB2E, "VVT: bank 2 exhaust", "deg", 1},
	{engine->outputChannels.rawTps1Secondary, "rawTps1Secondary", "V", 3},
	{engine->outputChannels.rawTps2Primary, "rawTps2Primary", "V", 3},
	{engine->outputChannels.rawTps2Secondary, "rawTps2Secondary", "V", 3},
	{engine->outputChannels.accelerationVert, "Accel: Vertical", "G", 0},
	{engine->outputChannels.gyroYaw, "Gyro: Yaw rate", "deg/sec", 0},
	{engine->outputChannels.vvtTargets[0], "vvtTargets 1", "deg", 0},
	{engine->outputChannels.vvtTargets[1], "vvtTargets 2", "deg", 0},
	{engine->outputChannels.vvtTargets[2], "vvtTargets 3", "deg", 0},
	{engine->outputChannels.vvtTargets[3], "vvtTargets 4", "deg", 0},
	{engine->outputChannels.turboSpeed, "Turbocharger Speed", "hz", 0},
	{engine->outputChannels.ignitionAdvanceCyl[0], "Ign: Timing Cyl 1", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[1], "Ign: Timing Cyl 2", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[2], "Ign: Timing Cyl 3", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[3], "Ign: Timing Cyl 4", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[4], "Ign: Timing Cyl 5", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[5], "Ign: Timing Cyl 6", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[6], "Ign: Timing Cyl 7", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[7], "Ign: Timing Cyl 8", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[8], "Ign: Timing Cyl 9", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[9], "Ign: Timing Cyl 10", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[10], "Ign: Timing Cyl 11", "deg", 1},
	{engine->outputChannels.ignitionAdvanceCyl[11], "Ign: Timing Cyl 12", "deg", 1},
	{engine->outputChannels.tps1Split, "tps1Split", "%", 2},
	{engine->outputChannels.tps2Split, "tps2Split", "%", 2},
	{engine->outputChannels.tps12Split, "tps12Split", "%", 2},
	{engine->outputChannels.accPedalSplit, "accPedalSplit", "%", 2},
	{engine->outputChannels.sparkCutReason, "Ign: Cut Code", "code", 0},
	{engine->outputChannels.fuelCutReason, "Fuel: Cut Code", "code", 0},
	{engine->outputChannels.mafEstimate, "Air: Flow estimate", "kg/h", 0},
	{engine->outputChannels.instantRpm, "sync: instant RPM", "rpm", 0},
	{engine->outputChannels.rawMap, "rawMap", "V", 3},
	{engine->outputChannels.rawAfr, "rawAfr", "V", 3},
	{engine->outputChannels.calibrationValue2, "calibrationValue2", "", 0},
	{engine->outputChannels.luaInvocationCounter, "Lua: Tick counter", "count", 0},
	{engine->outputChannels.luaLastCycleDuration, "Lua: Last tick duration", "nt", 0},
	{engine->outputChannels.vssEdgeCounter, "vssEdgeCounter", "", 0},
	{engine->outputChannels.issEdgeCounter, "issEdgeCounter", "", 0},
	{engine->outputChannels.auxLinear1, "Aux linear #1", "", 2},
	{engine->outputChannels.auxLinear2, "Aux linear #2", "", 2},
	{engine->outputChannels.auxLinear3, "Aux linear #3", "", 2},
	{engine->outputChannels.auxLinear4, "Aux linear #4", "", 2},
	{engine->outputChannels.fallbackMap, "fallbackMap", "kPa", 1},
	{engine->outputChannels.effectiveMap, "Effective MAP", "kPa", 1},
	{engine->outputChannels.instantMAPValue, "Instant MAP", "kPa", 2},
	{engine->outputChannels.maxLockedDuration, "maxLockedDuration", "us", 0},
	{engine->outputChannels.canWriteOk, "CAN: Tx OK", "", 0},
	{engine->outputChannels.canWriteNotOk, "CAN: Tx err", "", 0},
	{engine->outputChannels.triggerPrimaryFall, "triggerPrimaryFall", "", 3},
	{engine->outputChannels.triggerPrimaryRise, "triggerPrimaryRise", "", 3},
	{engine->outputChannels.triggerSecondaryFall, "triggerSecondaryFall", "", 3},
	{engine->outputChannels.triggerSecondaryRise, "triggerSecondaryRise", "", 3},
	{engine->outputChannels.starterState, "starterState", "", 3},
	{engine->outputChannels.starterRelayDisable, "starterRelayDisable", "", 3},
	{engine->outputChannels.multiSparkCounter, "Ign: Multispark count", "", 3},
	{engine->outputChannels.extiOverflowCount, "extiOverflowCount", "", 0},
	{engine->outputChannels.alternatorStatus.pTerm, "alternatorStatus.pTerm", "", 2},
	{engine->outputChannels.alternatorStatus.iTerm, "alternatorStatus.iTerm", "", 2},
	{engine->outputChannels.alternatorStatus.dTerm, "alternatorStatus.dTerm", "", 2},
	{engine->outputChannels.alternatorStatus.output, "alternatorStatus.output", "", 2},
	{engine->outputChannels.alternatorStatus.error, "alternatorStatus.error", "", 2},
	{engine->outputChannels.alternatorStatus.resetCounter, "alternatorStatus.resetCounter", "", 0},
	{engine->outputChannels.idleStatus.pTerm, "idleStatus.pTerm", "", 2},
	{engine->outputChannels.idleStatus.iTerm, "idleStatus.iTerm", "", 2},
	{engine->outputChannels.idleStatus.dTerm, "idleStatus.dTerm", "", 2},
	{engine->outputChannels.idleStatus.output, "idleStatus.output", "", 2},
	{engine->outputChannels.idleStatus.error, "idleStatus.error", "", 2},
	{engine->outputChannels.idleStatus.resetCounter, "idleStatus.resetCounter", "", 0},
	{engine->outputChannels.etbStatus.pTerm, "etbStatus.pTerm", "", 2},
	{engine->outputChannels.etbStatus.iTerm, "etbStatus.iTerm", "", 2},
	{engine->outputChannels.etbStatus.dTerm, "etbStatus.dTerm", "", 2},
	{engine->outputChannels.etbStatus.output, "etbStatus.output", "", 2},
	{engine->outputChannels.etbStatus.error, "etbStatus.error", "", 2},
	{engine->outputChannels.etbStatus.resetCounter, "etbStatus.resetCounter", "", 0},
	{engine->outputChannels.boostStatus.pTerm, "boostStatus.pTerm", "", 2},
	{engine->outputChannels.boostStatus.iTerm, "boostStatus.iTerm", "", 2},
	{engine->outputChannels.boostStatus.dTerm, "boostStatus.dTerm", "", 2},
	{engine->outputChannels.boostStatus.output, "boostStatus.output", "", 2},
	{engine->outputChannels.boostStatus.error, "boostStatus.error", "", 2},
	{engine->outputChannels.boostStatus.resetCounter, "boostStatus.resetCounter", "", 0},
	{engine->outputChannels.wastegateDcStatus.pTerm, "wastegateDcStatus.pTerm", "", 2},
	{engine->outputChannels.wastegateDcStatus.iTerm, "wastegateDcStatus.iTerm", "", 2},
	{engine->outputChannels.wastegateDcStatus.dTerm, "wastegateDcStatus.dTerm", "", 2},
	{engine->outputChannels.wastegateDcStatus.output, "wastegateDcStatus.output", "", 2},
	{engine->outputChannels.wastegateDcStatus.error, "wastegateDcStatus.error", "", 2},
	{engine->outputChannels.wastegateDcStatus.resetCounter, "wastegateDcStatus.resetCounter", "", 0},
	{engine->outputChannels.auxSpeed1, "Aux speed 1", "s", 0},
	{engine->outputChannels.auxSpeed2, "Aux speed 2", "s", 0},
	{engine->outputChannels.ISSValue, "TCU: Input Shaft Speed", "RPM", 0},
	{engine->outputChannels.rawAnalogInput[0], "rawAnalogInput 1", "V", 3},
	{engine->outputChannels.rawAnalogInput[1], "rawAnalogInput 2", "V", 3},
	{engine->outputChannels.rawAnalogInput[2], "rawAnalogInput 3", "V", 3},
	{engine->outputChannels.rawAnalogInput[3], "rawAnalogInput 4", "V", 3},
	{engine->outputChannels.rawAnalogInput[4], "rawAnalogInput 5", "V", 3},
	{engine->outputChannels.rawAnalogInput[5], "rawAnalogInput 6", "V", 3},
	{engine->outputChannels.rawAnalogInput[6], "rawAnalogInput 7", "V", 3},
	{engine->outputChannels.rawAnalogInput[7], "rawAnalogInput 8", "V", 3},
	{engine->outputChannels.gppwmOutput[0], "GPPWM Output 1", "%", 2},
	{engine->outputChannels.gppwmOutput[1], "GPPWM Output 2", "%", 2},
	{engine->outputChannels.gppwmOutput[2], "GPPWM Output 3", "%", 2},
	{engine->outputChannels.gppwmOutput[3], "GPPWM Output 4", "%", 2},
	{engine->outputChannels.gppwmXAxis[0], "gppwmXAxis 1", "", 0},
	{engine->outputChannels.gppwmXAxis[1], "gppwmXAxis 2", "", 0},
	{engine->outputChannels.gppwmXAxis[2], "gppwmXAxis 3", "", 0},
	{engine->outputChannels.gppwmXAxis[3], "gppwmXAxis 4", "", 0},
	{engine->outputChannels.gppwmYAxis[0], "gppwmYAxis 1", "", 1},
	{engine->outputChannels.gppwmYAxis[1], "gppwmYAxis 2", "", 1},
	{engine->outputChannels.gppwmYAxis[2], "gppwmYAxis 3", "", 1},
	{engine->outputChannels.gppwmYAxis[3], "gppwmYAxis 4", "", 1},
	{engine->outputChannels.rawBattery, "rawBattery", "V", 3},
	{engine->outputChannels.ignBlendParameter[0], "ignBlendParameter 1", "", 1},
	{engine->outputChannels.ignBlendParameter[1], "ignBlendParameter 2", "", 1},
	{engine->outputChannels.ignBlendParameter[2], "ignBlendParameter 3", "", 1},
	{engine->outputChannels.ignBlendParameter[3], "ignBlendParameter 4", "", 1},
	{engine->outputChannels.ignBlendBias[0], "ignBlendBias 1", "%", 1},
	{engine->outputChannels.ignBlendBias[1], "ignBlendBias 2", "%", 1},
	{engine->outputChannels.ignBlendBias[2], "ignBlendBias 3", "%", 1},
	{engine->outputChannels.ignBlendBias[3], "ignBlendBias 4", "%", 1},
	{engine->outputChannels.ignBlendOutput[0], "ignBlendOutput 1", "deg", 2},
	{engine->outputChannels.ignBlendOutput[1], "ignBlendOutput 2", "deg", 2},
	{engine->outputChannels.ignBlendOutput[2], "ignBlendOutput 3", "deg", 2},
	{engine->outputChannels.ignBlendOutput[3], "ignBlendOutput 4", "deg", 2},
	{engine->outputChannels.ignBlendYAxis[0], "ignBlendYAxis 1", "", 1},
	{engine->outputChannels.ignBlendYAxis[1], "ignBlendYAxis 2", "", 1},
	{engine->outputChannels.ignBlendYAxis[2], "ignBlendYAxis 3", "", 1},
	{engine->outputChannels.ignBlendYAxis[3], "ignBlendYAxis 4", "", 1},
	{engine->outputChannels.veBlendParameter[0], "veBlendParameter 1", "", 1},
	{engine->outputChannels.veBlendParameter[1], "veBlendParameter 2", "", 1},
	{engine->outputChannels.veBlendParameter[2], "veBlendParameter 3", "", 1},
	{engine->outputChannels.veBlendParameter[3], "veBlendParameter 4", "", 1},
	{engine->outputChannels.veBlendBias[0], "veBlendBias 1", "%", 1},
	{engine->outputChannels.veBlendBias[1], "veBlendBias 2", "%", 1},
	{engine->outputChannels.veBlendBias[2], "veBlendBias 3", "%", 1},
	{engine->outputChannels.veBlendBias[3], "veBlendBias 4", "%", 1},
	{engine->outputChannels.veBlendOutput[0], "veBlendOutput 1", "%", 2},
	{engine->outputChannels.veBlendOutput[1], "veBlendOutput 2", "%", 2},
	{engine->outputChannels.veBlendOutput[2], "veBlendOutput 3", "%", 2},
	{engine->outputChannels.veBlendOutput[3], "veBlendOutput 4", "%", 2},
	{engine->outputChannels.veBlendYAxis[0], "veBlendYAxis 1", "", 1},
	{engine->outputChannels.veBlendYAxis[1], "veBlendYAxis 2", "", 1},
	{engine->outputChannels.veBlendYAxis[2], "veBlendYAxis 3", "", 1},
	{engine->outputChannels.veBlendYAxis[3], "veBlendYAxis 4", "", 1},
	{engine->outputChannels.boostOpenLoopBlendParameter[0], "boostOpenLoopBlendParameter 1", "", 1},
	{engine->outputChannels.boostOpenLoopBlendParameter[1], "boostOpenLoopBlendParameter 2", "", 1},
	{engine->outputChannels.boostOpenLoopBlendBias[0], "boostOpenLoopBlendBias 1", "%", 1},
	{engine->outputChannels.boostOpenLoopBlendBias[1], "boostOpenLoopBlendBias 2", "%", 1},
	{engine->outputChannels.boostOpenLoopBlendOutput[0], "boostOpenLoopBlendOutput 1", "%", 0},
	{engine->outputChannels.boostOpenLoopBlendOutput[1], "boostOpenLoopBlendOutput 2", "%", 0},
	{engine->outputChannels.boostOpenLoopBlendYAxis[0], "boostOpenLoopBlendYAxis 1", "", 1},
	{engine->outputChannels.boostOpenLoopBlendYAxis[1], "boostOpenLoopBlendYAxis 2", "", 1},
	{engine->outputChannels.boostClosedLoopBlendParameter[0], "boostClosedLoopBlendParameter 1", "", 1},
	{engine->outputChannels.boostClosedLoopBlendParameter[1], "boostClosedLoopBlendParameter 2", "", 1},
	{engine->outputChannels.boostClosedLoopBlendBias[0], "boostClosedLoopBlendBias 1", "%", 1},
	{engine->outputChannels.boostClosedLoopBlendBias[1], "boostClosedLoopBlendBias 2", "%", 1},
	{engine->outputChannels.boostClosedLoopBlendOutput[0], "boostClosedLoopBlendOutput 1", "%", 1},
	{engine->outputChannels.boostClosedLoopBlendOutput[1], "boostClosedLoopBlendOutput 2", "%", 1},
	{engine->outputChannels.boostClosedLoopBlendYAxis[0], "boostClosedLoopBlendYAxis 1", "", 1},
	{engine->outputChannels.boostClosedLoopBlendYAxis[1], "boostClosedLoopBlendYAxis 2", "", 1},
	{engine->outputChannels.targetAfrBlendParameter[0], "targetAfrBlendParameter 1", "", 1},
	{engine->outputChannels.targetAfrBlendParameter[1], "targetAfrBlendParameter 2", "", 1},
	{engine->outputChannels.targetAfrBlendBias[0], "targetAfrBlendBias 1", "%", 1},
	{engine->outputChannels.targetAfrBlendBias[1], "targetAfrBlendBias 2", "%", 1},
	{engine->outputChannels.targetAfrBlendOutput[0], "targetAfrBlendOutput 1", "%", 1},
	{engine->outputChannels.targetAfrBlendOutput[1], "targetAfrBlendOutput 2", "%", 1},
	{engine->outputChannels, 676, 0, "coilState1", ""},
	{engine->outputChannels, 676, 1, "coilState2", ""},
	{engine->outputChannels, 676, 2, "coilState3", ""},
	{engine->outputChannels, 676, 3, "coilState4", ""},
	{engine->outputChannels, 676, 4, "coilState5", ""},
	{engine->outputChannels, 676, 5, "coilState6", ""},
	{engine->outputChannels, 676, 6, "coilState7", ""},
	{engine->outputChannels, 676, 7, "coilState8", ""},
	{engine->outputChannels, 676, 8, "coilState9", ""},
	{engine->outputChannels, 676, 9, "coilState10", ""},
	{engine->outputChannels, 676, 10, "coilState11", ""},
	{engine->outputChannels, 676, 11, "coilState12", ""},
	{engine->outputChannels, 676, 12, "injectorState1", ""},
	{engine->outputChannels, 676, 13, "injectorState2", ""},
	{engine->outputChannels, 676, 14, "injectorState3", ""},
	{engine->outputChannels, 676, 15, "injectorState4", ""},
	{engine->outputChannels, 676, 16, "injectorState5", ""},
	{engine->outputChannels, 676, 17, "injectorState6", ""},
	{engine->outputChannels, 676, 18, "injectorState7", ""},
	{engine->outputChannels, 676, 19, "injectorState8", ""},
	{engine->outputChannels, 676, 20, "injectorState9", ""},
	{engine->outputChannels, 676, 21, "injectorState10", ""},
	{engine->outputChannels, 676, 22, "injectorState11", ""},
	{engine->outputChannels, 676, 23, "injectorState12", ""},
	{engine->outputChannels, 676, 24, "triggerChannel1", ""},
	{engine->outputChannels, 676, 25, "triggerChannel2", ""},
	{engine->outputChannels, 676, 26, "bank 1 intake cam input", ""},
	{engine->outputChannels, 676, 27, "bank 1 exhaust cam input", ""},
	{engine->outputChannels, 676, 28, "bank 2 intake cam input", ""},
	{engine->outputChannels, 676, 29, "bank 2 exhaust cam input", ""},
	{engine->outputChannels.outputRequestPeriod, "outputRequestPeriod", "", 0},
	{engine->outputChannels.mapFast, "mapFast", "", 0},
	{engine->outputChannels.luaGauges[0], "Lua: Gauge 1", "value", 3},
	{engine->outputChannels.luaGauges[1], "Lua: Gauge 2", "value", 3},
	{engine->outputChannels.luaGauges[2], "Lua: Gauge 3", "value", 3},
	{engine->outputChannels.luaGauges[3], "Lua: Gauge 4", "value", 3},
	{engine->outputChannels.luaGauges[4], "Lua: Gauge 5", "value", 3},
	{engine->outputChannels.luaGauges[5], "Lua: Gauge 6", "value", 3},
	{engine->outputChannels.luaGauges[6], "Lua: Gauge 7", "value", 3},
	{engine->outputChannels.luaGauges[7], "Lua: Gauge 8", "value", 3},
	{engine->outputChannels.rawMaf2, "rawMaf2", "V", 3},
	{engine->outputChannels.mafMeasured2, "MAF #2", "kg/h", 1},
	{engine->outputChannels.schedulingUsedCount, "schedulingUsedCount", "", 0},
	{engine->outputChannels.vehicleSpeedKph, "Vehicle Speed", "kph", 2},
	{engine->outputChannels.Gego, "Gego", "%", 2},
	{engine->outputChannels.testBenchIter, "testBenchIter", "count", 0},
	{engine->outputChannels.oilTemp, "oilTemp", "deg C", 1},
	{engine->outputChannels.fuelTemp, "fuelTemp", "deg C", 1},
	{engine->outputChannels.ambientTemp, "ambientTemp", "deg C", 1},
	{engine->outputChannels.compressorDischargeTemp, "compressorDischargeTemp", "deg C", 1},
	{engine->outputChannels.compressorDischargePressure, "compressorDischargePressure", "kPa", 1},
	{engine->outputChannels.throttleInletPressure, "throttleInletPressure", "kPa", 1},
	{engine->outputChannels.ignitionOnTime, "ignitionOnTime", "sec", 1},
	{engine->outputChannels.engineRunTime, "engineRunTime", "sec", 1},
	{engine->outputChannels.distanceTraveled, "distanceTraveled", "km", 1},
	{engine->outputChannels.afrGasolineScale, "Air/Fuel Ratio (Gas Scale)", "AFR", 2},
	{engine->outputChannels.afr2GasolineScale, "Air/Fuel Ratio 2 (Gas Scale)", "AFR", 2},
	{engine->outputChannels.wheelSlipRatio, "wheelSlipRatio", "", 0},
	{engine->outputChannels.ignitorDiagnostic[0], "ignitorDiagnostic 1", "", 0},
	{engine->outputChannels.ignitorDiagnostic[1], "ignitorDiagnostic 2", "", 0},
	{engine->outputChannels.ignitorDiagnostic[2], "ignitorDiagnostic 3", "", 0},
	{engine->outputChannels.ignitorDiagnostic[3], "ignitorDiagnostic 4", "", 0},
	{engine->outputChannels.ignitorDiagnostic[4], "ignitorDiagnostic 5", "", 0},
	{engine->outputChannels.ignitorDiagnostic[5], "ignitorDiagnostic 6", "", 0},
	{engine->outputChannels.ignitorDiagnostic[6], "ignitorDiagnostic 7", "", 0},
	{engine->outputChannels.ignitorDiagnostic[7], "ignitorDiagnostic 8", "", 0},
	{engine->outputChannels.ignitorDiagnostic[8], "ignitorDiagnostic 9", "", 0},
	{engine->outputChannels.ignitorDiagnostic[9], "ignitorDiagnostic 10", "", 0},
	{engine->outputChannels.ignitorDiagnostic[10], "ignitorDiagnostic 11", "", 0},
	{engine->outputChannels.ignitorDiagnostic[11], "ignitorDiagnostic 12", "", 0},
	{engine->outputChannels.injectorDiagnostic[0], "injectorDiagnostic 1", "", 0},
	{engine->outputChannels.injectorDiagnostic[1], "injectorDiagnostic 2", "", 0},
	{engine->outputChannels.injectorDiagnostic[2], "injectorDiagnostic 3", "", 0},
	{engine->outputChannels.injectorDiagnostic[3], "injectorDiagnostic 4", "", 0},
	{engine->outputChannels.injectorDiagnostic[4], "injectorDiagnostic 5", "", 0},
	{engine->outputChannels.injectorDiagnostic[5], "injectorDiagnostic 6", "", 0},
	{engine->outputChannels.injectorDiagnostic[6], "injectorDiagnostic 7", "", 0},
	{engine->outputChannels.injectorDiagnostic[7], "injectorDiagnostic 8", "", 0},
	{engine->outputChannels.injectorDiagnostic[8], "injectorDiagnostic 9", "", 0},
	{engine->outputChannels.injectorDiagnostic[9], "injectorDiagnostic 10", "", 0},
	{engine->outputChannels.injectorDiagnostic[10], "injectorDiagnostic 11", "", 0},
	{engine->outputChannels.injectorDiagnostic[11], "injectorDiagnostic 12", "", 0},
	{engine->outputChannels.actualLastInjectionStage2, "Fuel: Last inj pulse width stg 2", "ms", 3},
	{engine->outputChannels.injectorDutyCycleStage2, "Fuel: injector duty cycle stage 2", "%", 0},
	{engine->outputChannels.rawFlexFreq, "rawFlexFreq", "", 0},
	{engine->outputChannels.canReWidebandCmdStatus, "canReWidebandCmdStatus", "", 0},
	{engine->outputChannels.deviceUid, "deviceUid", "", 0},
	{engine->outputChannels.mc33810spiErrorCounter, "mc33810spiErrorCounter", "", 0},
	{engine->outputChannels.sadDwellRatioCounter, "sadDwellRatioCounter", "", 0},
	{engine->outputChannels.injectionPrimingCounter, "injectionPrimingCounter", "", 0},
	{engine->outputChannels.tempLogging2, "tempLogging2", "", 0},
	{engine->outputChannels.acPressure, "A/C pressure", "kPa", 0},
	{engine->outputChannels.rawAuxAnalog1, "rawAuxAnalog1", "V", 3},
	{engine->outputChannels.rawAuxAnalog2, "rawAuxAnalog2", "V", 3},
	{engine->outputChannels.rawAuxAnalog3, "rawAuxAnalog3", "V", 3},
	{engine->outputChannels.rawAuxAnalog4, "rawAuxAnalog4", "V", 3},
	{engine->outputChannels.fastAdcErrorCount, "ECU: Fast ADC errors", "", 0},
	{engine->outputChannels.slowAdcErrorCount, "ECU: Slow ADC errors", "", 0},
	{engine->outputChannels.rawAuxTemp1, "rawAuxTemp1", "V", 3},
	{engine->outputChannels.rawAuxTemp2, "rawAuxTemp2", "V", 3},
	{engine->outputChannels.rawAmbientTemp, "rawAmbientTemp", "V", 3},
	{engine->outputChannels.rtcUnixEpochTime, "rtcUnixEpochTime", "", 0},
	{engine->outputChannels.sparkCutReasonBlinker, "sparkCutReasonBlinker", "", 0},
	{engine->outputChannels.fuelCutReasonBlinker, "fuelCutReasonBlinker", "", 0},
	{engine->outputChannels.hp, "hp", "", 0},
	{engine->outputChannels.torque, "torque", "", 0},
	{engine->outputChannels.throttlePressureRatio, "throttlePressureRatio", "", 0},
	{engine->outputChannels.throttleEffectiveAreaOpening, "throttleEffectiveAreaOpening", "", 0},
	{engine->outputChannels.mcuSerial, "mcuSerial", "", 0},
	{engine->outputChannels.sd_error, "sd_error", "", 0},
	{engine->outputChannels.fastAdcOverrunCount, "ECU: Fast ADC overruns", "", 0},
	{engine->outputChannels.slowAdcOverrunCount, "ECU: Slow ADC overruns", "", 0},
	{engine->outputChannels.fastAdcLastError, "ECU: Fast ADC error type", "", 0},
	{engine->outputChannels.fastAdcPeriod, "ECU: Fast ADC period", "ticks", 0},
	{engine->outputChannels.fastAdcConversionCount, "ECU: Fast ADC conversions", "N", 0},
	{engine->outputChannels.canReWidebandVersion, "canReWidebandVersion", "", 0},
	{engine->outputChannels.canReWidebandFwDay, "canReWidebandFwDay", "", 0},
	{engine->outputChannels.canReWidebandFwMon, "canReWidebandFwMon", "", 0},
	{engine->outputChannels.canReWidebandFwYear, "canReWidebandFwYear", "", 0},
	{engine->outputChannels.mapPerCylinder[0], "mapPerCylinder 1", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[1], "mapPerCylinder 2", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[2], "mapPerCylinder 3", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[3], "mapPerCylinder 4", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[4], "mapPerCylinder 5", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[5], "mapPerCylinder 6", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[6], "mapPerCylinder 7", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[7], "mapPerCylinder 8", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[8], "mapPerCylinder 9", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[9], "mapPerCylinder 10", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[10], "mapPerCylinder 11", "kPa", 0},
	{engine->outputChannels.mapPerCylinder[11], "mapPerCylinder 12", "kPa", 0},
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.totalFuelCorrection, "Fuel: Total correction", "mult", 2, "Fuel: math"},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.running.postCrankingFuelCorrection, "Fuel: Post cranking mult", "", 0},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.running.intakeTemperatureCoefficient, "Fuel: IAT correction", "", 0},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.running.coolantTemperatureCoefficient, "Fuel: CLT correction", "", 0},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.running.timeSinceCrankingInSecs, "running.timeSinceCrankingInSecs", "secs", 0, "Fuel: math"},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.running.baseFuel, "Fuel: base cycle mass", "mg", 3},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.running.fuel, "Fuel: running", "mg", 3},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.afrTableYAxis, "afrTableYAxis", "%", 0},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.targetLambda, "Fuel: target lambda", "", 2, "Fuel: math"},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.targetAFR, "Fuel: target AFR", "ratio", 2, "Fuel: math"},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.stoichiometricRatio, "Fuel: Stoich ratio", "ratio", 2},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.sdTcharge_coff, "sdTcharge_coff", "", 0},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.sdAirMassInOneCylinder, "Air: Cylinder airmass", "g", 3},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.normalizedCylinderFilling, "Air: Normalized cyl filling", "%", 1},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.brokenInjector, "brokenInjector", "", 0},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer.idealEngineTorque, "idealEngineTorque", "", 0},
#endif
#if EFI_ENGINE_CONTROL
	{engine->fuelComputer, 48, 0, "injectorHwIssue", ""},
#endif
	{engine->ignitionState.baseDwell, "Ignition: base dwell", "ms", 1, "Timing"},
	{engine->ignitionState.sparkDwell, "Ignition: coil charge time", "ms", 1, "Timing"},
	{engine->ignitionState.dwellDurationAngle, "Ignition: dwell duration", "deg", 1, "Timing"},
	{engine->ignitionState.cltTimingCorrection, "Ign: CLT correction", "deg", 2, "Timing"},
	{engine->ignitionState.timingIatCorrection, "Ign: IAT correction", "deg", 2, "Timing"},
	{engine->ignitionState.timingPidCorrection, "Idle: Timing adjustment", "deg", 2, "Timing"},
	{engine->ignitionState.dfcoTimingRetard, "DFCO: Timing retard", "deg", 2},
	{engine->ignitionState.baseIgnitionAdvance, "Timing: base ignition", "deg", 1},
	{engine->ignitionState.correctedIgnitionAdvance, "Timing: ignition", "deg", 1},
	{engine->ignitionState.tractionAdvanceDrop, "Traction: timing correction", "deg", 1},
	{engine->ignitionState.dwellVoltageCorrection, "Ign: Dwell voltage correction", "", 0},
	{engine->ignitionState.luaTimingAdd, "Ign: Lua timing add", "deg", 2, "Timing"},
	{engine->ignitionState.luaTimingMult, "Ign: Lua timing mult", "deg", 2, "Timing"},
	{engine->ignitionState, 40, 0, "Ign: Lua Spark Skip", ""},
	{engine->ignitionState.trailingSparkAngle, "Ign: Trailing spark deg", "deg", 2, "Timing"},
	{engine->ignitionState.rpmForIgnitionTableDot, "rpmForIgnitionTableDot", "", 0},
	{engine->ignitionState.rpmForIgnitionIdleTableDot, "rpmForIgnitionIdleTableDot", "", 0},
	{engine->ignitionState.loadForIgnitionTableDot, "loadForIgnitionTableDot", "", 0},
	{engine->module<KnockController>()->m_knockLevel, "Knock: Current level", "Volts", 2},
	{engine->module<KnockController>()->m_knockCyl[0], "Knock: Cyl 1", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[1], "Knock: Cyl 2", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[2], "Knock: Cyl 3", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[3], "Knock: Cyl 4", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[4], "Knock: Cyl 5", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[5], "Knock: Cyl 6", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[6], "Knock: Cyl 7", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[7], "Knock: Cyl 8", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[8], "Knock: Cyl 9", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[9], "Knock: Cyl 10", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[10], "Knock: Cyl 11", "dBv", 0},
	{engine->module<KnockController>()->m_knockCyl[11], "Knock: Cyl 12", "dBv", 0},
	{engine->module<KnockController>()->m_knockRetard, "Knock: Retard", "deg", 1},
	{engine->module<KnockController>()->m_knockThreshold, "Knock: Threshold", "", 0},
	{engine->module<KnockController>()->m_knockCount, "Knock: Count", "", 0},
	{engine->module<KnockController>()->m_maximumRetard, "Knock: Max retard", "", 0},
	{engine->module<KnockController>()->m_knockSpectrum[0], "Knock: SpectrumData 1", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[1], "Knock: SpectrumData 2", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[2], "Knock: SpectrumData 3", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[3], "Knock: SpectrumData 4", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[4], "Knock: SpectrumData 5", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[5], "Knock: SpectrumData 6", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[6], "Knock: SpectrumData 7", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[7], "Knock: SpectrumData 8", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[8], "Knock: SpectrumData 9", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[9], "Knock: SpectrumData 10", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[10], "Knock: SpectrumData 11", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[11], "Knock: SpectrumData 12", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[12], "Knock: SpectrumData 13", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[13], "Knock: SpectrumData 14", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[14], "Knock: SpectrumData 15", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrum[15], "Knock: SpectrumData 16", "compressed data", 0},
	{engine->module<KnockController>()->m_knockSpectrumChannelCyl, "Knock: ChannelAndCylNumber", "compressed N + N", 0},
	{engine->module<KnockController>()->m_knockFrequencyStart, "Knock: Start Freq", "Hz", 0},
	{engine->module<KnockController>()->m_knockFrequencyStep, "Knock: Step Freq", "Hz", 0},
	{engine->module<KnockController>()->m_knockFuelTrimMultiplier, "Knock: Fuel trim when knock", "multiplier", 0},
	{*engine->module<PrimeController>(), 0, 0, "IsFuelPriming", ""},
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<InjectorModelPrimary>()->m_deadtime, "Fuel: injector lag", "ms", 3},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<InjectorModelPrimary>()->pressureDelta, "Fuel: Injector pressure delta", "kPa", 1},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<InjectorModelPrimary>()->pressureRatio, "Fuel: Injector pressure ratio", "", 3},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<InjectorModelPrimary>()->pressureCorrectionReference, "Fuel: corr reference pressure", "kPa", 1},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController.retardThresholdRpm, "Launch: Retard threshold RPM", "", 0},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 0, "launchActivatePinState", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 1, "isPreLaunchCondition", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 2, "Launch: isLaunchCondition", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 3, "Launch: isSwitchActivated", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 4, "Launch: isClutchActivated", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 5, "isBrakePedalActivated", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 6, "Launch: isValidInputPin", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 7, "Launch: activateSwitchCondition", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 8, "rpmLaunchCondition", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 9, "rpmPreLaunchCondition", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 10, "Launch: speedCondition", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->launchController, 4, 11, "Launch: tpsCondition", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->shiftTorqueReductionController, 0, 0, "isTorqueReductionTriggerPinValid", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->shiftTorqueReductionController, 0, 1, "torqueReductionTriggerPinState", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->shiftTorqueReductionController, 0, 2, "isTimeConditionSatisfied", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->shiftTorqueReductionController, 0, 3, "isRpmConditionSatisfied", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->shiftTorqueReductionController, 0, 4, "isAppConditionSatisfied", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->shiftTorqueReductionController, 0, 5, "isFlatShiftConditionSatisfied", ""},
#endif
#if EFI_LAUNCH_CONTROL
	{engine->shiftTorqueReductionController, 0, 6, "isBelowTemperatureThreshold", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 0, "isTpsInvalid", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 1, "m_shouldResetPid", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 2, "isBelowClosedLoopThreshold", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 3, "isNotClosedLoop", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 4, "isZeroRpm", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 5, "hasInitBoost", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 6, "rpmTooLow", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 7, "tpsTooLow", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 8, "mapTooLow", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 9, "isPlantValid", ""},
#endif
#if EFI_BOOST_CONTROL
	{*engine->module<BoostController>(), 0, 10, "isBoostControlled", ""},
#endif
#if EFI_BOOST_CONTROL
	{engine->module<BoostController>()->luaTargetAdd, "Boost: Lua target add", "percent", 1, "Boost Control"},
#endif
#if EFI_BOOST_CONTROL
	{engine->module<BoostController>()->luaTargetMult, "Boost: Lua target mult", "", 1, "Boost Control"},
#endif
#if EFI_BOOST_CONTROL
	{engine->module<BoostController>()->boostControlTarget, "Boost: Target", "kPa", 1, "Boost Control"},
#endif
#if EFI_BOOST_CONTROL
	{engine->module<BoostController>()->openLoopPart, "Boost: Open loop", "percent", 1, "Boost Control"},
#endif
#if EFI_BOOST_CONTROL
	{engine->module<BoostController>()->luaOpenLoopAdd, "Boost: Lua open loop add", "percent", 1, "Boost Control"},
#endif
#if EFI_BOOST_CONTROL
	{engine->module<BoostController>()->boostControllerClosedLoopPart, "Boost: Closed loop", "%", 1, "Boost Control"},
#endif
#if EFI_BOOST_CONTROL
	{engine->module<BoostController>()->boostOutput, "Boost: Output", "percent", 2, "Boost Control"},
#endif
	{*engine->module<FanControl1>(), 0, 0, "fan1cranking", ""},
	{*engine->module<FanControl1>(), 0, 1, "fan1notRunning", ""},
	{*engine->module<FanControl1>(), 0, 2, "fan1Engine stopped", ""},
	{*engine->module<FanControl1>(), 0, 3, "fan1Broken CLT", ""},
	{*engine->module<FanControl1>(), 0, 4, "fan1Enable for AC", ""},
	{*engine->module<FanControl1>(), 0, 5, "fan1Above hot threshold", ""},
	{*engine->module<FanControl1>(), 0, 6, "fan1Below cold threshold", ""},
	{*engine->module<FanControl1>(), 0, 7, "fan1disabledBySpeed", ""},
	{*engine->module<FanControl1>(), 0, 8, "fan1On", ""},
	{engine->module<FanControl1>()->radiatorFanStatus, "fan1radiatorFanStatus", "", 0},
	{*engine->module<FanControl2>(), 0, 0, "fan2cranking", ""},
	{*engine->module<FanControl2>(), 0, 1, "fan2notRunning", ""},
	{*engine->module<FanControl2>(), 0, 2, "fan2Engine stopped", ""},
	{*engine->module<FanControl2>(), 0, 3, "fan2Broken CLT", ""},
	{*engine->module<FanControl2>(), 0, 4, "fan2Enable for AC", ""},
	{*engine->module<FanControl2>(), 0, 5, "fan2Above hot threshold", ""},
	{*engine->module<FanControl2>(), 0, 6, "fan2Below cold threshold", ""},
	{*engine->module<FanControl2>(), 0, 7, "fan2disabledBySpeed", ""},
	{*engine->module<FanControl2>(), 0, 8, "fan2On", ""},
	{engine->module<FanControl2>()->radiatorFanStatus, "fan2radiatorFanStatus", "", 0},
	{engine->engineState.injectionMass[0], "injectionMass 1", "", 0},
	{engine->engineState.injectionMass[1], "injectionMass 2", "", 0},
	{engine->engineState.injectionMass[2], "injectionMass 3", "", 0},
	{engine->engineState.injectionMass[3], "injectionMass 4", "", 0},
	{engine->engineState.injectionMass[4], "injectionMass 5", "", 0},
	{engine->engineState.injectionMass[5], "injectionMass 6", "", 0},
	{engine->engineState.injectionMass[6], "injectionMass 7", "", 0},
	{engine->engineState.injectionMass[7], "injectionMass 8", "", 0},
	{engine->engineState.injectionMass[8], "injectionMass 9", "", 0},
	{engine->engineState.injectionMass[9], "injectionMass 10", "", 0},
	{engine->engineState.injectionMass[10], "injectionMass 11", "", 0},
	{engine->engineState.injectionMass[11], "injectionMass 12", "", 0},
	{engine->engineState.lua.fuelAdd, "Lua: Fuel add", "g", 3},
	{engine->engineState.lua.fuelMult, "Lua: Fuel mult", "", 0},
	{engine->engineState, 56, 0, "lua.clutchUpState", ""},
	{engine->engineState, 56, 1, "lua.brakePedalState", ""},
	{engine->engineState, 56, 2, "lua.acRequestState", ""},
	{engine->engineState, 56, 3, "lua.luaDisableEtb", ""},
	{engine->engineState, 56, 4, "lua.luaIgnCut", ""},
	{engine->engineState, 56, 5, "lua.luaFuelCut", ""},
	{engine->engineState, 56, 6, "lua.clutchDownState", ""},
	{engine->engineState, 56, 7, "lua.disableDecelerationFuelCutOff", ""},
	{engine->engineState, 56, 8, "lua.torqueReductionState", ""},
	{engine->engineState.sd.tCharge, "Air: Charge temperature estimate", "deg C", 1},
	{engine->engineState.sd.tChargeK, "Air: Charge temperature estimate K", "", 0},
	{engine->engineState.crankingFuel.coolantTemperatureCoefficient, "Fuel: cranking CLT mult", "", 0},
	{engine->engineState.crankingFuel.tpsCoefficient, "Fuel: cranking TPS mult", "", 0},
	{engine->engineState.crankingFuel.baseFuel, "Fuel: Cranking cycle base mass", "mg", 2},
	{engine->engineState.crankingFuel.fuel, "Fuel: Cranking cycle mass", "mg", 2},
	{engine->engineState.baroCorrection, "Fuel: Barometric pressure mult", "", 0},
	{engine->engineState.hellenBoardId, "Detected Board ID", "id", 0},
	{engine->engineState.clutchUpState, "Clutch: up", "", 0},
	{engine->engineState.brakePedalState, "Brake switch", "", 0},
	{engine->engineState.startStopState, "startStopState", "", 0},
	{engine->engineState.smartChipState, "smartChipState", "", 0},
	{engine->engineState.smartChipRestartCounter, "smartChipRestartCounter", "", 0},
	{engine->engineState.smartChipAliveCounter, "smartChipAliveCounter", "", 0},
	{engine->engineState, 92, 0, "startStopPhysicalState", ""},
	{engine->engineState, 92, 1, "Harley ACR Active", ""},
	{engine->engineState, 92, 2, "acrEngineMovedRecently", ""},
	{engine->engineState, 92, 3, "heaterControlEnabled", ""},
	{engine->engineState, 92, 4, "luaDigitalState0", ""},
	{engine->engineState, 92, 5, "luaDigitalState1", ""},
	{engine->engineState, 92, 6, "luaDigitalState2", ""},
	{engine->engineState, 92, 7, "luaDigitalState3", ""},
	{engine->engineState, 92, 8, "Clutch: down", ""},
	{engine->engineState.startStopStateToggleCounter, "startStopStateToggleCounter", "", 0},
	{engine->engineState.currentVe, "currentVe", "", 0},
	{engine->engineState.luaSoftSparkSkip, "luaSoftSparkSkip", "", 0},
	{engine->engineState.luaHardSparkSkip, "luaHardSparkSkip", "", 0},
	{engine->engineState.tractionControlSparkSkip, "tractionControlSparkSkip", "", 0},
	{engine->engineState.fuelInjectionCounter, "Fuel: Injection counter", "", 0},
	{engine->engineState.globalSparkCounter, "Ign: Spark counter", "", 0},
	{engine->engineState.fuelingLoad, "Fuel: Load", "", 0},
	{engine->engineState.ignitionLoad, "Ignition: load", "", 0},
	{engine->engineState.veTableYAxis, "veTableYAxis", "%", 0},
	{engine->engineState.overDwellCounter, "overDwellCounter", "", 0},
	{engine->engineState.overDwellNotScheduledCounter, "overDwellNotScheduledCounter", "", 0},
	{engine->engineState.sparkOutOfOrderCounter, "sparkOutOfOrderCounter", "", 0},
	{engine->engineState.stftCorrection[0], "STFT: Bank 1", "%", 1},
	{engine->engineState.stftCorrection[1], "STFT: Bank 2", "%", 1},
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.hwEventCounters[0], "Hardware events since boot 1", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.hwEventCounters[1], "Hardware events since boot 2", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.hwEventCounters[2], "Hardware events since boot 3", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.hwEventCounters[3], "Hardware events since boot 4", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.vvtEventRiseCounter[0], "vvtEventRiseCounter 1", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.vvtEventRiseCounter[1], "vvtEventRiseCounter 2", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.vvtEventRiseCounter[2], "vvtEventRiseCounter 3", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.vvtEventRiseCounter[3], "vvtEventRiseCounter 4", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.vvtEventFallCounter[0], "vvtEventFallCounter 1", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.vvtEventFallCounter[1], "vvtEventFallCounter 2", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.vvtEventFallCounter[2], "vvtEventFallCounter 3", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.vvtEventFallCounter[3], "vvtEventFallCounter 4", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.vvtCamCounter, "Sync: total cams front counter", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.mapVvt_MAP_AT_SPECIAL_POINT, "InstantMAP at readout angle", "kPa", 1},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.mapVvt_MAP_AT_DIFF, "InstantMAP delta @ readout angles", "kPa", 1},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.mapVvt_MAP_AT_CYCLE_COUNT, "mapVvt_MAP_AT_CYCLE_COUNT", "distance", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.mapVvt_sync_counter, "Instant MAP sync counter", "counter", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.mapVvt_min_point_counter, "mapVvt_min_point_counter", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.temp_mapVvt_index, "temp_mapVvt_index", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.mapVvt_CycleDelta, "mapVvt_CycleDelta", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.currentEngineDecodedPhase, "Sync: Engine Phase", "deg", 0, "Sync"},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.triggerToothAngleError, "Sync: trigger angle error", "deg", 2},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.triggerIgnoredToothCount, "triggerIgnoredToothCount", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.mapCamPrevToothAngle, "Sync: MAP: prev angle", "deg", 2},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral, 64, 0, "isDecodingMapCam", ""},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->triggerCentral.triggerElapsedUs, "triggerElapsedUs", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.triggerState.synchronizationCounter, "trgsync: wheel sync counter", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.triggerState.vvtToothDurations0, "trgvvtToothDurations0", "us", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.triggerState.vvtCurrentPosition, "trgsync: Primary Position", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.triggerState.vvtToothPosition[0], "trgsync: Cam Position 1", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.triggerState.vvtToothPosition[1], "trgsync: Cam Position 2", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.triggerState.vvtToothPosition[2], "trgsync: Cam Position 3", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.triggerState.vvtToothPosition[3], "trgsync: Cam Position 4", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.triggerState.triggerSyncGapRatio, "trgSync: Trigger Latest Ratio", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.triggerState.triggerStateIndex, "trgtriggerStateIndex", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.triggerState.triggerCountersError, "trgtriggerCountersError", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][0].synchronizationCounter, "vvt1isync: wheel sync counter", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][0].vvtToothDurations0, "vvt1ivvtToothDurations0", "us", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][0].vvtCurrentPosition, "vvt1isync: Primary Position", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][0].vvtToothPosition[0], "vvt1isync: Cam Position 1", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][0].vvtToothPosition[1], "vvt1isync: Cam Position 2", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][0].vvtToothPosition[2], "vvt1isync: Cam Position 3", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][0].vvtToothPosition[3], "vvt1isync: Cam Position 4", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][0].triggerSyncGapRatio, "vvt1iSync: Trigger Latest Ratio", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][0].triggerStateIndex, "vvt1itriggerStateIndex", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][0].triggerCountersError, "vvt1itriggerCountersError", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][1].synchronizationCounter, "vvt1esync: wheel sync counter", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][1].vvtToothDurations0, "vvt1evvtToothDurations0", "us", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][1].vvtCurrentPosition, "vvt1esync: Primary Position", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][1].vvtToothPosition[0], "vvt1esync: Cam Position 1", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][1].vvtToothPosition[1], "vvt1esync: Cam Position 2", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][1].vvtToothPosition[2], "vvt1esync: Cam Position 3", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][1].vvtToothPosition[3], "vvt1esync: Cam Position 4", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][1].triggerSyncGapRatio, "vvt1eSync: Trigger Latest Ratio", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][1].triggerStateIndex, "vvt1etriggerStateIndex", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[0][1].triggerCountersError, "vvt1etriggerCountersError", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][0].synchronizationCounter, "vvt2isync: wheel sync counter", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][0].vvtToothDurations0, "vvt2ivvtToothDurations0", "us", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][0].vvtCurrentPosition, "vvt2isync: Primary Position", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][0].vvtToothPosition[0], "vvt2isync: Cam Position 1", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][0].vvtToothPosition[1], "vvt2isync: Cam Position 2", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][0].vvtToothPosition[2], "vvt2isync: Cam Position 3", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][0].vvtToothPosition[3], "vvt2isync: Cam Position 4", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][0].triggerSyncGapRatio, "vvt2iSync: Trigger Latest Ratio", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][0].triggerStateIndex, "vvt2itriggerStateIndex", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][0].triggerCountersError, "vvt2itriggerCountersError", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][1].synchronizationCounter, "vvt2esync: wheel sync counter", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][1].vvtToothDurations0, "vvt2evvtToothDurations0", "us", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][1].vvtCurrentPosition, "vvt2esync: Primary Position", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][1].vvtToothPosition[0], "vvt2esync: Cam Position 1", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][1].vvtToothPosition[1], "vvt2esync: Cam Position 2", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][1].vvtToothPosition[2], "vvt2esync: Cam Position 3", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][1].vvtToothPosition[3], "vvt2esync: Cam Position 4", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][1].triggerSyncGapRatio, "vvt2eSync: Trigger Latest Ratio", "", 3},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][1].triggerStateIndex, "vvt2etriggerStateIndex", "", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT && FULL_SD_LOGS
	{engine->triggerCentral.vvtState[1][1].triggerCountersError, "vvt2etriggerCountersError", "", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().baseIdlePosition, "idle: base value", "", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().iacByTpsTaper, "idle: iacByTpsTaper portion", "", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 0, "idle: mightResetPid", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 1, "Idle: shouldResetPid", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 2, "Idle: wasResetPid", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 3, "Idle: mustResetPid", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 4, "Idle: cranking", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 5, "isIacTableForCoasting", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 6, "Idle: reset", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 7, "Idle: dead zone", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 8, "isBlipping", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 9, "badTps", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 10, "looksLikeRunning", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 11, "looksLikeCoasting", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 12, "looksLikeCrankToIdle", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 13, "Idle: coasting", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock(), 12, 14, "Idle: Closed loop active", ""},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().idleTarget, "Idle: Target RPM", "", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().targetRpmByClt, "Idle: Target RPM base", "", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().targetRpmAc, "Idle: Target A/C RPM", "", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().iacByRpmTaper, "idle: iacByRpmTaper portion", "", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().luaAdd, "idle: Lua Adder", "", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().m_lastTargetRpm, "m_lastTargetRpm", "", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().idleClosedLoop, "Closed loop", "", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().currentIdlePosition, "Idle: Position", "%", 1},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().idleTargetAirmass, "Target airmass", "mg", 0},
#endif
#if EFI_PROD_CODE && EFI_IDLE_CONTROL
	{engine->module<IdleController>().unmock().idleTargetFlow, "Target airflow", "kg/h", 2},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->targetWithIdlePosition, "etb1ETB: target with idle", "%", 2, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->trim, "etb1ETB: trim", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->boardEtbAdjustment, "etb1boardEtbAdjustment", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->luaAdjustment, "etb1ETB: luaAdjustment", "%", 2, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->m_wastegatePosition, "etb1DC: wastegatePosition", "%", 2, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->m_lastPidDtMs, "etb1EBT: last PID dT", "mS", 3, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->etbFeedForward, "etb1etbFeedForward", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->integralError, "etb1Integral error", "", 3, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->etbCurrentTarget, "etb1ETB: target for current pedal", "%", 3},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->m_adjustedTarget, "etb1Adjusted target", "%", 2},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{*getLiveData<electronic_throttle_s>(0), 40, 0, "etb1etbRevLimitActive", ""},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{*getLiveData<electronic_throttle_s>(0), 40, 1, "etb1jamDetected", ""},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{*getLiveData<electronic_throttle_s>(0), 40, 2, "etb1validPlantPosition", ""},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->etbTpsErrorCounter, "etb1ETB TPS error counter", "count", 0, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->etbPpsErrorCounter, "etb1ETB pedal error counter", "count", 0, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->etbErrorCode, "etb1etbErrorCode", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->etbErrorCodeBlinker, "etb1etbErrorCodeBlinker", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->tcEtbDrop, "etb1ETB traction control", "%", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->jamTimer, "etb1ETB jam timer", "sec", 2},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->adjustedEtbTarget, "etb1ETB with adjustments", "%", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(0)->state, "etb1state", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->targetWithIdlePosition, "etb2ETB: target with idle", "%", 2, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->trim, "etb2ETB: trim", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->boardEtbAdjustment, "etb2boardEtbAdjustment", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->luaAdjustment, "etb2ETB: luaAdjustment", "%", 2, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->m_wastegatePosition, "etb2DC: wastegatePosition", "%", 2, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->m_lastPidDtMs, "etb2EBT: last PID dT", "mS", 3, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->etbFeedForward, "etb2etbFeedForward", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->integralError, "etb2Integral error", "", 3, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->etbCurrentTarget, "etb2ETB: target for current pedal", "%", 3},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->m_adjustedTarget, "etb2Adjusted target", "%", 2},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{*getLiveData<electronic_throttle_s>(1), 40, 0, "etb2etbRevLimitActive", ""},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{*getLiveData<electronic_throttle_s>(1), 40, 1, "etb2jamDetected", ""},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{*getLiveData<electronic_throttle_s>(1), 40, 2, "etb2validPlantPosition", ""},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->etbTpsErrorCounter, "etb2ETB TPS error counter", "count", 0, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->etbPpsErrorCounter, "etb2ETB pedal error counter", "count", 0, "ETB more"},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->etbErrorCode, "etb2etbErrorCode", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->etbErrorCodeBlinker, "etb2etbErrorCodeBlinker", "", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->tcEtbDrop, "etb2ETB traction control", "%", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->jamTimer, "etb2ETB jam timer", "sec", 2},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->adjustedEtbTarget, "etb2ETB with adjustments", "%", 0},
#endif
#if EFI_PROD_CODE && EFI_ELECTRONIC_THROTTLE_BODY && FULL_SD_LOGS
	{getLiveData<electronic_throttle_s>(1)->state, "etb2state", "", 0},
#endif
	{engine->dc_motors.dcOutput0, "DC: output0", "%", 2, "ETB more"},
	{engine->dc_motors.isEnabled0_int, "DC: en0", "%", 2, "ETB more"},
	{engine->dc_motors, 8, 0, "isEnabled0", ""},
#if EFI_VVT_PID
	{engine->module<VvtController1>()->vvtTarget, "vvtTarget", "deg", 1},
#endif
#if EFI_VVT_PID
	{engine->module<VvtController1>()->vvtOutput, "vvtOutput", "%", 0},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->lambdaMonitor, 0, 0, "lambdaCurrentlyGood", ""},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->lambdaMonitor, 0, 1, "lambdaMonitorCut", ""},
#endif
#if EFI_SHAFT_POSITION_INPUT
	{engine->lambdaMonitor.lambdaTimeSinceGood, "lambdaTimeSinceGood", "sec", 2},
#endif
};
