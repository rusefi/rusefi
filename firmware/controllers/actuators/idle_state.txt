
struct_no_prefix idle_state_s
custom idle_state_e 4 bits, S32, @OFFSET@, [0:2], "not important"
    idle_state_e idleState

	custom percent_t 4 scalar, F32, @OFFSET@, "", 1, 0, 0, 100, 2

    percent_t baseIdlePosition;"idle: base value\ncurrent position without adjustments (iacByTpsTaper, afterCrankingIACtaperDuration)"
	  percent_t iacByTpsTaper;idle: iacByTpsTaper portion

    bit mightResetPid;idle: mightResetPid\nThe idea of 'mightResetPid' is to reset PID only once - each time when TPS > idlePidDeactivationTpsThreshold.\nThe throttle pedal can be pressed for a long time, making the PID data obsolete (thus the reset is required).\nWe set 'mightResetPid' to true only if PID was actually used (i.e. idlePid.getOutput() was called) to save some CPU resources.\nSee automaticIdleController().

	bit shouldResetPid;Idle: shouldResetPid\nThis is used when the PID configuration is changed, to guarantee the reset
	bit wasResetPid;Idle: wasResetPid\nThis is needed to slowly turn on the PID back after it was reset.
    bit isCranking;Idle: cranking
    bit isIacTableForCoasting

	bit needReset;Idle: reset
	bit isInDeadZone;Idle: dead zone
	bit isBlipping

    bit badTps
	bit looksLikeRunning
	bit looksLikeCoasting
	bit looksLikeCrankToIdle
    bit isIdleCoasting;Idle: coasting
	bit isIdleClosedLoop;Idle: Closed loop active
	bit isIdling; Idle: idling

	uint16_t idleTarget;Idle: Target RPM
	uint16_t idleEntryRpm;Idle: Entry threshold
	uint16_t idleExitRpm;Idle: Exit threshold

	int targetRpmByClt;Idle: Target RPM base
	int targetRpmAc;Idle: Target A/C RPM

    percent_t iacByRpmTaper;idle: iacByRpmTaper portion

    percent_t luaAdd;idle: Lua Adder
	int m_lastTargetRpm

	! Closed loop
	percent_t idleClosedLoop;Closed loop

	! Final output
	percent_t currentIdlePosition;@@GAUGE_NAME_IAC@@;"%", 1, 0, 0, 0, 1

	uint16_t idleTargetAirmass;Target airmass;"mg", 1, 0, 0, 0, 0
	uint16_t autoscale idleTargetFlow;Target airflow;"kg/h", 0.01, 0, 0, 0, 2
end_struct
