package com.rusefi.ldmp;

import com.devexperts.logging.Logging;
import com.rusefi.*;
import com.rusefi.output.*;
import com.rusefi.util.LazyFile;
import org.jetbrains.annotations.NotNull;
import org.yaml.snakeyaml.Yaml;

import java.io.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class LiveDataProcessor {
    private final static Logging log = Logging.getLogging(LiveDataProcessor.class);

    private final static String header = "// generated by gen_live_documentation.sh / LiveDataProcessor.java\n";

    public static final String STATE_DICTIONARY_FACTORY_JAVA = "../java_console/io/src/main/java/com/rusefi/enums/StateDictionaryFactory.java";
    public static final String JAVA_DESTINATION = "../java_console/models/src/main/java/com/rusefi/config/generated/";

    private final ReaderProvider readerProvider;
    private final LazyFile.LazyFileFactory fileFactory;

    private final GaugeConsumer gaugeConsumer;
    private final String destinationFolder;

    private final StringBuilder enumContent = new StringBuilder(header +
        "#pragma once\n" +
        "\n" +
        "// this generated C header is mostly used as input for java code generation\n" +
        "typedef enum {\n");

    private final StringBuilder baseAddressCHeader = new StringBuilder();

    private final StringBuilder totalSensors = new StringBuilder();

    private final StringBuilder liveDataIniContent = new StringBuilder();

    public final StateDictionaryGenerator stateDictionaryGenerator;

    private final StringBuilder liveDataMenuContent = new StringBuilder();

    private final StringBuilder fragmentsContent = new StringBuilder(header);

    private final String extraPrepend = System.getProperty("LiveDataProcessor.extra_prepend");

    public LiveDataProcessor(String yamlFileName, ReaderProvider readerProvider, LazyFile.LazyFileFactory fileFactory, String destinationFolder) {
        this.readerProvider = readerProvider;
        this.fileFactory = fileFactory;
        this.destinationFolder = destinationFolder;

        stateDictionaryGenerator = new StateDictionaryGenerator(yamlFileName);
        gaugeConsumer = new GaugeConsumer(getGauges(), fileFactory);
    }

    public static void main(String[] args) throws IOException {
        if (args.length != 6) {
            System.err.println("Six arguments expected: name of live data yaml input file and else but got " + args.length + ": " + Arrays.toString(args));
            System.exit(-1);
        }
        log.info("Invoked with " + Arrays.toString(args));
        String yamlFileNames = args[0];
        log.info("yamlFileNames=" + yamlFileNames);
        String definitionInputFileName = args[1];
        String headerFileName = args[2];
        String javaDestinationFolder = args[3];
        String javaDestinationFileName = args[4];
        String destinationFolder = args[5];
        TriggerMetaGenerator.doJob(definitionInputFileName, headerFileName, javaDestinationFolder, javaDestinationFileName);
        List<LinkedHashMap> totalContent = new ArrayList<>();
        for (String fileName : yamlFileNames.split(",")) {
            List<LinkedHashMap> yamlContent = getStringObjectMap(new FileReader(fileName));
            totalContent.addAll(yamlContent);
        }

        LiveDataProcessor liveDataProcessor = new LiveDataProcessor(yamlFileNames, ReaderProvider.REAL, LazyFile.REAL, destinationFolder);
        int sensorTsPosition = liveDataProcessor.handleYaml(totalContent);

        liveDataProcessor.end(sensorTsPosition);
    }

    public static ArrayList<LinkedHashMap> getStringObjectMap(Reader reader) {
        Yaml yaml = new Yaml();
        Map<String, Object> objectMap = yaml.load(reader);
        Objects.requireNonNull(objectMap, "content of " + reader);
        if (objectMap.size() != 1)
            throw new IllegalStateException("Exactly one top level key expected");
        String key = objectMap.keySet().iterator().next();
        ArrayList<LinkedHashMap> linkedHashMaps = (ArrayList<LinkedHashMap>) objectMap.get(key);
        log.info("Got "  + linkedHashMaps.size() + " for " + key);
        return linkedHashMaps;
    }

    private String getTsOutputsDestination() {
        return destinationFolder + "console/binary/generated/";
    }

    public String getEnumContentFileName() {
        return getTsOutputsDestination() + "live_data_ids.h";
    }

    public String getGauges() {
        return getTsOutputsDestination() + "gauges.ini";
    }

    public String getDataFragmentsH() {
        return getTsOutputsDestination() + "live_data_fragments.h";
    }

    public String getLiveDataIniFileName() {
        return getTsOutputsDestination() + "fancy_content.ini";
    }

    public String getFancyMenuIni() {
        return getTsOutputsDestination() + "fancy_menu.ini";
    }

    public String getDataLogFileName() {
        return getTsOutputsDestination() + "data_logs.ini";
    }

    public String getOutputsSectionFileName() {
        return getTsOutputsDestination() + "live_data_fragments.ini";
    }

    private void end(int sensorTsPosition) throws IOException {
        log.info("TS_TOTAL_OUTPUT_SIZE=" + sensorTsPosition);
        try (FileWriter fw = new FileWriter(getTsOutputsDestination() + "total_live_data_generated.h")) {
            fw.write(header);
            fw.write("#define TS_TOTAL_OUTPUT_SIZE " + sensorTsPosition);
        }
    }

    interface EntryHandler {
        void onEntry(String name, String javaName, String inFolder, String prepend, String[] outputNames, String[] constexpr, String conditional, String engineModule, Boolean isPtr, String cppFileName, String outFolder) throws IOException;
    }

    public int handleYaml(List<LinkedHashMap> liveDocs) throws IOException {
        AtomicInteger startingPosition = new AtomicInteger();

        OutputsSectionConsumer outputsSections = new OutputsSectionConsumer(getOutputsSectionFileName(),
            fileFactory);

        DataLogConsumer dataLogConsumer = new DataLogConsumer(getDataLogFileName(), fileFactory);

        SdCardFieldsContent sdCardFieldsConsumer = new SdCardFieldsContent();

        GetOutputValueConsumer outputValueConsumer = new GetOutputValueConsumer(getOutputLookupFileName(), fileFactory);

        EntryHandler handler = new EntryHandler() {
            @Override
            public void onEntry(String name, String javaName, String inFolder, String prepend, String[] outputNames, String[] constexpr, String conditional, String engineModule, Boolean isPtr, String cppFileName, String outFolder) throws IOException {
                Objects.requireNonNull(outFolder);
                // TODO: use outputNames

                if (constexpr != null) {
                    if (outputNames.length != constexpr.length) {
                        throw new IllegalStateException(Arrays.toString(outputNames) + " vs " + Arrays.toString(constexpr));
                    }
                }

                stateDictionaryGenerator.onEntry(name, javaName, outputNames, cppFileName);

                log.info("Starting " + name + " at " + startingPosition + " with [" + conditional + "]");

                baseAddressCHeader.append("#define " + name.toUpperCase() + "_BASE_ADDRESS " + startingPosition + "\n");

                ReaderState state = new ReaderStateImpl(readerProvider, fileFactory);
                state.setDefinitionInputFile(inFolder + File.separator + name + ".txt");
                state.setWithC_Defines(false);

                outputsSections.outputNames = outputNames;
                dataLogConsumer.outputNames = outputNames;
                gaugeConsumer.outputNames = outputNames;

                List<JavaSensorsConsumer> javaSensorsConsumers = new ArrayList<>();
                for (int i = 0; i < outputNames.length; i++) {
                    JavaSensorsConsumer javaSensorsConsumer = new JavaSensorsConsumer(startingPosition.get());
                    state.addDestination(javaSensorsConsumer);
                    javaSensorsConsumers.add(javaSensorsConsumer);
                }

                state.addDestination(
                    outputsSections,
                    dataLogConsumer
                );

                List<FragmentDialogConsumer> fragmentConsumers = new ArrayList<>();

                for (int i = 0; i < outputNames.length; i++) {

                    String variableNameSuffix = outputNames.length > 1 ? Integer.toString(i) : "";
                    String variableNamePrefix = outputNames.length > 1 ? outputNames[i] : "";
                    FragmentDialogConsumer fragmentDialogConsumer = new FragmentDialogConsumer(name, variableNamePrefix, variableNameSuffix);
                    fragmentConsumers.add(fragmentDialogConsumer);
                    state.addDestination(fragmentDialogConsumer);
                }

                if (extraPrepend != null) {
                    if (new File(extraPrepend).exists()) {
                        log.info("extraPrepend=" + extraPrepend);
                        state.addPrepend(extraPrepend);
                    } else {
                        log.info("extraPrepend=" + extraPrepend + " does not exist, skipping");
                    }
                }
                state.addPrepend(prepend);
                state.addCHeaderDestination(outFolder + File.separator + name + "_generated.h");

                sdCardFieldsConsumer.structureStartingTsPosition = outputsSections.getBaseOffset();

                if (constexpr != null) {
                    sdCardFieldsConsumer.expressions = constexpr;
                    sdCardFieldsConsumer.names = outputNames;
                    sdCardFieldsConsumer.conditional = conditional;
                    sdCardFieldsConsumer.isPtr = isPtr;
                    state.addDestination(sdCardFieldsConsumer::handleEndStruct);

                    outputValueConsumer.expressions = constexpr;
                    outputValueConsumer.names = outputNames;
                    outputValueConsumer.moduleMode = false;
                    outputValueConsumer.conditional = conditional;
                    outputValueConsumer.isPtr = isPtr;
                    state.addDestination(outputValueConsumer::handleEndStruct);

                } else if (engineModule != null) {
                    outputValueConsumer.currentEngineModule = engineModule;
                    outputValueConsumer.moduleMode = true;
                    outputValueConsumer.conditional = conditional;
                    outputValueConsumer.isPtr = isPtr;
                    state.addDestination(outputValueConsumer::handleEndStruct);
                }
                state.addDestination(new ConfigurationConsumer() {
                    @Override
                    public void handleEndStruct(ReaderState readerState, ConfigStructure structure) throws IOException {
                        gaugeConsumer.handleEndStruct(readerState, structure);
                    }
                });

                state.doJob();

                for (FragmentDialogConsumer fragmentDialogConsumer : fragmentConsumers) {
                    liveDataIniContent.append(fragmentDialogConsumer.getContent());
                    liveDataMenuContent.append(fragmentDialogConsumer.menuLine());
                }

                for (JavaSensorsConsumer javaSensorsConsumer : javaSensorsConsumers) {
                    totalSensors.append(javaSensorsConsumer.getContent());
                    startingPosition.addAndGet(javaSensorsConsumer.getStructSize());
                }

                log.info("Done with " + name + " at " + startingPosition);
            }
        };

        StringBuilder additionalHeadersStr = new StringBuilder();

        for (LinkedHashMap<?, ?> entry : liveDocs) {
            String name = (String) entry.get("name");
            String java = (String) entry.get("java");
            String inputOutputFolder = (String) entry.get("folder");
            String inputFolder = (String) entry.get("input_folder");
            String prepend = (String) entry.get("prepend");
            Object constexprValue = entry.get("constexpr");
            String engineModule = (String) entry.get("engineModule");
            String cppFileName = (String) entry.get("cppFileName");
            if (cppFileName == null)
                cppFileName = name;
            String conditional = (String) entry.get("conditional_compilation");
            Boolean isPtr = (Boolean) entry.get("isPtr");
            isPtr = isPtr != null && isPtr;

            Object outputNames = entry.get("output_name");
            Object additionalHeaders = entry.get("additional_headers");

            if (additionalHeaders != null) {
                String[] additionalHeadersArr = getStrings(additionalHeaders);

                for (String s : additionalHeadersArr) {
                    if (conditional != null) {
                        additionalHeadersStr.append("#if ").append(conditional).append("\n");
                    }
                    additionalHeadersStr.append("#include <").append(s).append(">\n");
                    if (conditional != null) {
                        additionalHeadersStr.append("#endif\n");
                    }
                }
            }

            String[] outputNamesArr = getStrings(outputNames);
            String[] constexpr = constexprValue == null ? null : getStrings(constexprValue);

            if (inputFolder != null) {
                log.info("Only inputFolder " + inputFolder);
            } else {
                log.info("Common inputOutputFolder " + inputOutputFolder);
                inputFolder = inputOutputFolder;
            }

            handler.onEntry(name, java, inputFolder, prepend, outputNamesArr, constexpr, conditional, engineModule, isPtr, cppFileName, "live_data_generated");

            String enumName = "LDS_" + name;
            String type = name + "_s"; // convention

            if (outputNamesArr.length < 2) {
                enumContent.append(enumName + ",\n");
                fragmentsContent
                    .append("decl_frag<")
                    .append(type)
                    .append(">{},\n");
            } else {
                for (int i = 0; i < outputNamesArr.length; i++) {
                    enumContent.append(enumName + i + ",\n");
                }

                for (int i = 0; i < outputNamesArr.length; i++) {
                    if (needComment(i)) {
                        // TODO: remove once the rest of the handling for multiple copies of one struct is in place.
                        fragmentsContent.append("// ");
                    }

                    fragmentsContent
                        .append("decl_frag<")
                        .append(type)
                        .append(", ")
                        .append(i)
                        .append(">{},\t// ")
                        .append(outputNamesArr[i])
                        .append("\n");
                }
            }
        }
        enumContent.append("} live_data_e;\n");

        if (additionalHeadersStr.length() > 0) {
            outputValueConsumer.additionalHeaders = additionalHeadersStr.toString();
        }

        LazyFile lazyFile = fileFactory.create(destinationFolder + SdCardFieldsContent.SD_CARD_OUTPUT_FILE_NAME);
        SdCardFieldsContent.wrapContent(lazyFile, sdCardFieldsConsumer.getBody());
        lazyFile.close();

        dataLogConsumer.endFile();
        outputValueConsumer.endFile();
        try (LazyFile fw = fileFactory.create("console/binary/generated/sensors.java")) {
            fw.write(totalSensors.toString());
        }

        try (LazyFile fw = fileFactory.create(getLiveDataIniFileName())) {
            fw.write(liveDataIniContent.toString());
        }

        try (LazyFile fw = fileFactory.create(getFancyMenuIni())) {
            fw.write(liveDataMenuContent.toString());
        }

        GetConfigValueConsumer.writeStringToFile(STATE_DICTIONARY_FACTORY_JAVA, stateDictionaryGenerator.getCompleteClass(), fileFactory);

        writeFiles();

        return startingPosition.get();
    }

    public static @NotNull String getOutputLookupFileName() {
        return "controllers/lua/generated/output_lookup_generated.cpp";
    }

    private static String @NotNull [] getStrings(Object value) {
        String[] output;
        if (value == null) {
            output = new String[]{""};
        } else if (value instanceof String) {
            output = new String[]{(String) value};
        } else {
            ArrayList<String> nameList = (ArrayList<String>) value;
            output = new String[nameList.size()];
            nameList.toArray(output);
        }
        return output;
    }

    private void writeFiles() throws IOException {
        gaugeConsumer.endFile();
        try (LazyFile fw = fileFactory.create(getEnumContentFileName())) {
            fw.write(enumContent.toString());
            fw.write(baseAddressCHeader.toString());
        }

        try (LazyFile fw = fileFactory.create(getDataFragmentsH())) {
            fw.write(fragmentsContent.toString());
        }
    }

    public static boolean needComment(int index) {
        return false;
    }
}
